=2048) # Generate a 2048-bit RSA private key
public_key = private_key.public_key()
return private_key, public_key

Function to save RSA private key to a file
def save_rsa_private_key(private_key, private_key_file):
with open(private_key_file, "wb") as file:
private_key_pem = private_key.private_bytes(
encoding=serialization.Encoding.PEM,
format=serialization.PrivateFormat.PKCS8,
encryption_algorithm=serialization.NoEncryption()
)
file.write(private_key_pem)
print(f"RSA private key saved to '{private_key_file}'.")

Function to save RSA public key to a file
def save_rsa_public_key(public_key, public_key_file):
with open(public_key_file, "wb") as file:
public_key_pem = public_key.public_bytes(
encoding=serialization.Encoding.PEM,
format=serialization.PublicFormat.SubjectPublicKeyInfo
)
file.write(public_key_pem)
print(f"RSA public key saved to '{public_key_file}'.")

Function to load RSA private key from a file
def load_rsa_private_key(private_key_file):
with open(private_key_file, "rb") as file:
private_key_pem = file.read()
private_key = serialization.load_pem_private_key(
private_key_pem,
password=None
)
return private_key

Function to load RSA public key from a file
def load_rsa_public_key(public_key_file):
with open(public_key_file, "rb") as file:
public_key_pem = file.read()
public_key = serialization.load_pem_public_key(public_key_pem)
return public_key

Function to encrypt a file using RSA
def encrypt_file_rsa(public_key, input_file, encrypted_file):
ciphertext = public_key.encrypt(
token_bytes(256),
padding.OAEP(
mgf=padding.MGF1(algorithm=hashes.SHA256()),
algorithm=hashes.SHA256(),
label=None
)
)
output_file = encrypted_file + ".enc"
with open(input_file, "rb") as file:
plaintext = file.read()
with open(output_file, "wb") as enc_file:
enc_file.write(ciphertext + plaintext)
print(f"File '{input_file}' encrypted using RSA and saved as '{output_file}'.")

Function to decrypt a file using RSA
def decrypt_file_rsa(private_key, encrypted_file, decrypted_file):
with open(encrypted_file, "rb") as enc_file:
ciphertext = enc_file.read()
ciphertext_length = private_key.key_size // 8
ciphertext = ciphertext[:ciphertext_length]
plaintext = private_key.decrypt(
ciphertext,
padding.OAEP(
mgf=padding.MGF1(algorithm=hashes.SHA256()),
algorithm=hashes.SHA256(),
label=None
)
)
output_file = decrypted_file + ".dec"
with open(output_file, "wb") as dec_file:
dec_file.write(plaintext)
print(f"File '{encrypted_file}' decrypted using RSA and saved as '{output_file}'.")
